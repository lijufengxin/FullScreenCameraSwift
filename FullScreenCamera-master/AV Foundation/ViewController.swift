//
//  ViewController.swift
//  AV Foundation
//
//  Created  
//  Copyright © 2017    . All rights reserved.
//

import UIKit
import Photos

class ViewController: UIViewController {
    
    @IBOutlet fileprivate var captureButton: UIButton!
    
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet fileprivate var capturePreviewView: UIView!
    
    ///Allows the user to put the camera in photo mode.
    @IBOutlet fileprivate var photoModeButton: UIButton!
    @IBOutlet fileprivate var toggleCameraButton: UIButton!
    @IBOutlet fileprivate var toggleFlashButton: UIButton!
    
    ///Allows the user to put the camera in video mode.
    @IBOutlet fileprivate var videoModeButton: UIButton!
    var   captureSession:AVCaptureSession?
     var   preViewLayer:AVCaptureVideoPreviewLayer?
    var   cameraDeviceInput:AVCaptureDeviceInput?
     var   moviewFileOutPut:AVCaptureMovieFileOutput?
    override var prefersStatusBarHidden: Bool { return true }
    
}

extension ViewController {
    override func viewDidLoad() {
        self.captureSession = AVCaptureSession();
        let  captureDevice = self.getCameraDeviceWithPosition(device: AVCaptureDevice.Position.back);
        if   captureDevice === nil   {
            print("获取后置摄像头时出现问题")
        }
        do{
      try   cameraDeviceInput = AVCaptureDeviceInput.init(device: captureDevice)
        moviewFileOutPut = AVCaptureMovieFileOutput.init();
        if (self.captureSession?.canAddInput(self.cameraDeviceInput!))! {
            self.captureSession?.addInput(self.cameraDeviceInput!)
        }
            if (self.captureSession?.canAddOutput(self.moviewFileOutPut!))! {
                self.captureSession?.addOutput(self.moviewFileOutPut!)
            }
            
            self.preViewLayer = AVCaptureVideoPreviewLayer.init(session: self.captureSession!)
            self.preViewLayer?.videoGravity = .resizeAspectFill;
            self.preViewLayer?.connection?.videoOrientation = .portrait;
            self.capturePreviewView.layer .insertSublayer(self.preViewLayer!, at: 0)
            self.preViewLayer?.frame = self.capturePreviewView.frame;
            self.captureSession?.startRunning()
            
        }catch{
            
        }
    }
    
    
    func getCameraDeviceWithPosition(device:AVCaptureDevice.Position) -> AVCaptureDevice {
        let  captureDevice =  AVCaptureDevice.devices(for: AVMediaType.video)
        for camera in captureDevice {
                    if camera.position == device {
                        return camera;
                    }
                }
        return captureDevice.first!
    }

    
}




extension ViewController {
    @IBAction func toggleFlash(_ sender: UIButton) {
        if sender.isSelected {
            sender.isSelected = false
            self .setFlashModel(mode: AVCaptureDevice.TorchMode.off);
        }else{
            sender.isSelected = true
              self .setFlashModel(mode: AVCaptureDevice.TorchMode.on);
        }
    }
    
    func setFlashModel(mode:AVCaptureDevice.TorchMode)  {
        do{
        let captureDevice = self.cameraDeviceInput?.device
            try  captureDevice?.lockForConfiguration()
            if (captureDevice?.isTorchModeSupported(mode))!{
                captureDevice?.torchMode = mode
            }
            captureDevice?.unlockForConfiguration()
        
        }catch{
            
        }
    }
    
    
    //转换前后摄像头
    @IBAction func switchCameras(_ sender: UIButton) {
        let currentDevice = self.cameraDeviceInput?.device;
        let currentPosition = currentDevice?.position
        let toChangeDevice:AVCaptureDevice?
        let  toChangePosition =  AVCaptureDevice.Position.front
        if  currentPosition == AVCaptureDevice.Position.unspecified || currentPosition == AVCaptureDevice.Position.front {
            self.toggleFlashButton.isHidden = false
        }else{
            self.toggleFlashButton.isHidden = true
        }
        toChangeDevice = self.getCameraDeviceWithPosition(device: toChangePosition)
        do{
            let  toChangeDeviceInput = try AVCaptureDeviceInput.init(device: toChangeDevice!)
            self.captureSession?.beginConfiguration()
            self.captureSession?.removeInput(self.cameraDeviceInput!)
            if (self.captureSession?.canAddInput(toChangeDeviceInput))! {
                 self.captureSession?.addInput(toChangeDeviceInput)
                self.cameraDeviceInput = toChangeDeviceInput
            }
            self.captureSession?.commitConfiguration()
            self.toggleFlashButton.isSelected = false
            self.toggleFlashButton .setBackgroundImage(UIImage.init(named: "flashOn"), for: .normal)
        }catch{
            
        }
     
        
    }
    
    @IBAction func captureImage(_ sender: UIButton)
    {
        
    }
    
    
    
    
    
    
    
    
}

